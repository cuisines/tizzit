<?xml version="1.0" encoding="$xmlEncoding"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <!--
        Modified for ConQuest to support  org.tizzit.util.spring.httpinvoker.StreamSupportingHttpInvokerServiceExporter.
        All other available exports (hessian, rmi, burlap) has been removed.
        Some other errors regarding  <bean id="${serviceRemoteContext}RemoteAuthenticationManagerService" fixed.
    -->
    <!-- ========================= Start of BEAN POSTPROCESSORS ======================== -->
#set ($propertiesFile = "${stringUtils.substringBeforeLast($applicationContextClient, '.')}.properties")

    <bean id="propertyPlaceholderConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:${propertiesFile}</value>
        </property>        
        <property name="systemPropertiesModeName">
            <value>SYSTEM_PROPERTIES_MODE_OVERRIDE</value>
        </property>        
    </bean>

    <!-- ========================= End of BEAN POSTPROCESSORS ========================== -->


#if ($adviceEnabled)
    <!-- ========================= Start of INTERCEPTOR DEFINITIONS ==================== -->

#set ($exceptionHandlingAdviceName = "$clientExceptionHandlingAdviceName")
#if($stringUtils.isNotEmpty($springTypesPackage))
#set ($exceptionHandlingAdviceName = "$springTypesPackage.$exceptionHandlingAdviceName")
#end
    <!-- Custom exception handling interceptor -->
    <bean id="exceptionHandlingAdvice" class="$exceptionHandlingAdviceName" />

    <!-- ========================= End of INTERCEPTOR DEFINITIONS ======================= -->


#end
    <!-- ========================= Start of SERVICE DEFINITIONS ========================= -->

#foreach($service in $services)
#if($service.remotable)
    <!-- $service.name Remote Service Local Proxy with inner $service.name Remote Service invoker -->
    <bean id="$service.getBeanName(false)" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.tizzit.util.spring.httpinvoker.StreamSupportingHttpInvokerProxyFactoryBean">
                <property name="serviceUrl"><value>$service.remoteUrl</value></property>
                <property name="serviceInterface"><value>$service.fullyQualifiedName</value></property>
#if($stringUtils.isNotBlank($clientHttpInvokerExecutor))
                <property name="httpInvokerRequestExecutor">
                    <ref local="httpInvokerRequestExecutor"/>
                </property>
#end
            </bean>
        </property>
        <property name="proxyInterfaces"><value>$service.fullyQualifiedName</value></property>
#if ($adviceEnabled)
        <property name="interceptorNames">
            <list>
                <value>exceptionHandlingAdvice</value>
            </list>
        </property>
#end
    </bean>

#end
#end
#foreach ($manageable in $manageables)
    <!-- $manageable.manageableServiceName Remote Service Local Proxy with inner $manageable.manageableServiceName Remote Service invoker -->
    <bean id="$manageable.manageableServiceName" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="org.tizzit.util.spring.httpinvoker.StreamSupportingHttpInvokerProxyFactoryBean">
                <property name="serviceUrl"><value>$manageable.remoteUrl</value></property>
                <property name="serviceInterface"><value>$manageable.fullyQualifiedManageableServiceName</value></property>
            </bean>
        </property>
        <property name="proxyInterfaces"><value>$manageable.fullyQualifiedManageableServiceName</value></property>
#if ($adviceEnabled)
        <property name="interceptorNames">
            <list>
                <value>exceptionHandlingAdvice</value>
            </list>
        </property>
#end
    </bean>

#end
#if($stringUtils.isNotBlank($clientHttpInvokerExecutor))
    <bean id="httpInvokerRequestExecutor" class="$clientHttpInvokerExecutor"/>

#end
#if($acegiServiceSecurity)
    <bean id="${serviceRemoteContext}RemoteAuthenticationManagerService"
        class="org.tizzit.util.spring.httpinvoker.StreamSupportingHttpInvokerProxyFactoryBean">
        <property name="serviceUrl">
            <value>http://${${configPropertyPrefix}remoteServer}:${${configPropertyPrefix}remotePort}/${${configPropertyPrefix}remoteContext}/RemoteAuthenticationManagerService</value>
        </property>
        <property name="serviceInterface">
            <value>org.springframework.security.providers.rcp.RemoteAuthenticationManager</value>
        </property>
    </bean>

#end
    <!-- ========================= End of SERVICE DEFINITIONS ========================= -->

</beans>