// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringClientServiceLocator.vsl in andromda-spring-cartridge.
//
#set ($generatedFile = "${clientServiceLocatorName}.java")
#if($stringUtils.isNotEmpty($springTypesPackage))
package $springTypesPackage;
#set ($generatedFile = "${stringUtils.replace($springTypesPackage,'.','/')}/${generatedFile}")
#end

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Locates and provides all available application services.
 */
public class $clientServiceLocatorName
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_CONTEXT_LOCATION = "$applicationContextClient";

    /**
     * The spring application context shared instance.
     */
    private ClassPathXmlApplicationContext context = null;

    /**
     * The application context location.
     */
    private String contextLocation;

    private ${clientServiceLocatorName}()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ${clientServiceLocatorName}.
     */
    private final static ${clientServiceLocatorName} instance = new ${clientServiceLocatorName}();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static ${clientServiceLocatorName} instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>applicationContextLocation</code>.  If <code>null</code>
     * is specified for the <code>applicationContextLocation</code>
     * then the default application context will be used.
     *
     * @param applicationContextLocation the location of the context
     */
    public synchronized void init(String applicationContextLocation)
    {
        contextLocation = applicationContextLocation;
        context = null;
    }

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized ApplicationContext getContext()
    {
        if (context == null)
        {
            if (contextLocation == null)
            {
                contextLocation = DEFAULT_CONTEXT_LOCATION;
            }
#if ($clientServiceLocatorClassloaderSwitching.equalsIgnoreCase("on"))
            Thread currentThread = Thread.currentThread();
            ClassLoader originalClassloader = currentThread.getContextClassLoader();
            try
            {
                currentThread.setContextClassLoader(this.getClass().getClassLoader());
#end
                context = new ClassPathXmlApplicationContext(contextLocation);
#if ($clientServiceLocatorClassloaderSwitching.equalsIgnoreCase("on"))
            }
            finally
            {
                currentThread.setContextClassLoader(originalClassloader);
            }
#end
        }
        return context;
    }

#foreach ($service in $services)
#if($service.remotable)
    /**
     * Gets an instance of {@link $service.fullyQualifiedName}.
     */
    public final $service.fullyQualifiedName get${service.name}()
    {
        return ($service.fullyQualifiedName)
            getContext().getBean("$service.beanName");
    }

#end
#end
#foreach ($manageable in $manageables)
#if ($manageable.remotable)
    /**
     * Gets an instance of {@link $manageable.fullyQualifiedManageableServiceName}.
     */
    public final $manageable.fullyQualifiedManageableServiceName get${manageable.manageableServiceName}()
    {
        return ($manageable.fullyQualifiedManageableServiceName)
            getContext().getBean("$manageable.manageableServiceName");
    }

#end
#end
#if ($acegiServiceSecurity && $richClient)
    /**
     * Get the authentication manager used to validate user credentials.
     */
     public final org.springframework.security.providers.rcp.RemoteAuthenticationManager getRemoteAuthenticationService()
    {
    return (org.springframework.security.providers.rcp.RemoteAuthenticationManager)
            getContext().getBean("${serviceRemoteContext}RemoteAuthenticationManagerService");
    }

#end
    /**
     * Gets an instance of the given service.
     */
    public final Object getService(String serviceName)
    {
        return getContext().getBean(serviceName);
    }
	
}
